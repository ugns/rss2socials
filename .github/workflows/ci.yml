name: CI

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install pip-tools
        run: pip install pip-tools
      - name: Generate requirements.txt (main + dev)
        run: pip-compile --extra dev --strip-extras --output-file=requirements.txt pyproject.toml
      - name: Install all dependencies (main + dev, pinned)
        run: pip install -r requirements.txt
      - name: Install tox
        run: pip install tox
      - name: Run tests
        run: tox -e ${{ matrix.python-version }} -- --junitxml=pytest-results-${{ matrix.python-version }}.xml
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true
          files: pytest-results-${{ matrix.python-version }}.xml
          flags: py${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install pip-tools
        run: pip install pip-tools
      - name: Generate requirements.txt (main + dev)
        run: pip-compile --extra dev --strip-extras --output-file=requirements.txt pyproject.toml
      - name: Install all dependencies (main + dev, pinned)
        run: pip install -r requirements.txt
      - name: Install tox
        run: pip install tox
      - name: Lint
        run: tox -e lint

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install pip-tools
        run: pip install pip-tools
      - name: Generate requirements.txt (main + dev)
        run: pip-compile --extra dev --strip-extras --output-file=requirements.txt pyproject.toml
      - name: Install all dependencies (main + dev, pinned)
        run: pip install -r requirements.txt
      - name: Install tox
        run: pip install tox
      - name: Run coverage
        run: tox -e coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unit-tests
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov (coverage env)
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true
          files: pytest-results.xml
          flags: py3x
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      released: ${{ steps.release.outputs.released }}
    needs: [test, lint, coverage]
    if: github.ref_type == 'branch' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install pip-tools
        run: pip install pip-tools
      - name: Generate requirements.txt (main + dev)
        run: pip-compile --extra dev --strip-extras --output-file=requirements.txt pyproject.toml
      - name: Install all dependencies (main + dev, pinned)
        run: pip install -r requirements.txt
      - name: Action | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

  deploy:
    # 1. Separate out the deploy step from the publish step to run each step at
    #    the least amount of token privilege
    # 2. Also, deployments can fail, and its better to have a separate job if you need to retry
    #    and it won't require reversing the release.
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'

    permissions:
      contents: read
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v5
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist/

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
